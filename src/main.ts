import * as fs from "fs";
import {
	bold,
	red,
	green,
	yellow,
	blue,
	cyan,
	magenta,
	white,
	bgBlue,
	bgMagenta,
	bgGreen,
	bgRed,
	bgYellow,
	underline,
	dim,
	italic,
	strikethrough,
} from "colorette";
import boxen from "boxen";

type BorderStyle = "single" | "double" | "round" | "bold" | "classic" | "none";

import { modPow } from "./utils";

import { desEncryptFile, desDecryptFile } from "./lab1/lab1_des";
import {
	generateRSAKeyPair,
	rsaEncryptFile,
	rsaDecryptFile,
} from "./lab1/lab1_rsa";

import { ParkMillerPRNG, rabinMillerTest } from "./lab2/lab2_prng";
import { md5, sha1 } from "./lab2/lab2_hashes";

import { signMessage, verifyMessage } from "./lab3/lab3_signature";
import { noKeyAttackRSA } from "./lab3/lab3_attacks";

import { startKeylogger, stopKeylogger } from "./lab4/lab4_keylogger";
import { embedMessageLSB, extractMessageLSB } from "./lab4/lab4_stego";

import * as readline from "readline";

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout,
});

function questionAsync(questionText: string): Promise<string> {
	return new Promise((resolve) => {
		rl.question(questionText, (answer) => {
			resolve(answer.trim());
		});
	});
}

const menuBoxOptions = {
	padding: 1,
	margin: 0,
	borderStyle: "round" as BorderStyle,
	borderColor: "cyan",
	backgroundColor: "#000000",
};

const subMenuBoxOptions = {
	padding: 1,
	margin: 0,
	borderStyle: "round" as BorderStyle,
	borderColor: "blue",
	backgroundColor: "#000000",
};

function showMainMenu(): void {
	console.log(
		boxen(
			yellow(bold("CRYPTO CORE PLEX") + white(":")) +
				"\n\n" +
				white(bold("1)")) +
				" " +
				yellow("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ ‚Ññ1") +
				" " +
				dim("(DES/RSA)") +
				"\n" +
				white(bold("2)")) +
				" " +
				yellow("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ ‚Ññ2") +
				" " +
				dim("(PRNG, –ü—Ä–æ—Å—Ç–æ—Ç–∞, –•–µ—à—ñ)") +
				"\n" +
				white(bold("3)")) +
				" " +
				yellow("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ ‚Ññ3") +
				" " +
				dim("(–ï–¶–ü, –ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª—ñ–∑)") +
				"\n" +
				white(bold("4)")) +
				" " +
				yellow("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ ‚Ññ4") +
				" " +
				dim("(Keylogger, Stego)") +
				"\n" +
				white(bold("0)")) +
				" " +
				red("–í–∏—Ö—ñ–¥"),
			menuBoxOptions,
		),
	);
}

function showLab1Menu(): void {
	console.log(
		boxen(
			yellow(bold("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ ‚Ññ1")) +
				" " +
				dim("(DES/RSA)") +
				"\n\n" +
				white(bold("1)")) +
				" DES: " +
				cyan("–ó–∞—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ —Ñ–∞–π–ª") +
				"\n" +
				white(bold("2)")) +
				" DES: " +
				cyan("–†–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ —Ñ–∞–π–ª") +
				"\n" +
				white(bold("3)")) +
				" RSA: " +
				cyan("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–ª—é—á—ñ") +
				"\n" +
				white(bold("4)")) +
				" RSA: " +
				cyan("–ó–∞—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ —Ñ–∞–π–ª") +
				"\n" +
				white(bold("5)")) +
				" RSA: " +
				cyan("–†–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ —Ñ–∞–π–ª") +
				"\n" +
				white(bold("0)")) +
				" " +
				red("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
			{ ...subMenuBoxOptions, borderColor: "magenta" },
		),
	);
}

function showLab2Menu(): void {
	console.log(
		boxen(
			yellow(bold("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ ‚Ññ2")) +
				" " +
				dim("(PRNG, –•–µ—à—ñ)") +
				"\n\n" +
				white(bold("1)")) +
				" " +
				cyan("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ì–ü–í–ß") +
				" " +
				dim("(Park‚ÄìMiller)") +
				"\n" +
				white(bold("2)")) +
				" " +
				cyan("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏—Å–ª–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É") +
				" " +
				dim("(Rabin‚ÄìMiller)") +
				"\n" +
				white(bold("3)")) +
				" " +
				cyan("–ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ MD5 —Ç–∞ SHA-1") +
				" " +
				dim("(—à–≤–∏–¥–∫—ñ—Å—Ç—å/—Ö–µ—à)") +
				"\n" +
				white(bold("0)")) +
				" " +
				red("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
			{ ...subMenuBoxOptions, borderColor: "blue" },
		),
	);
}

function showLab3Menu(): void {
	console.log(
		boxen(
			yellow(bold("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ ‚Ññ3")) +
				" " +
				dim("(–ï–¶–ü, –ê—Ç–∞–∫–∏)") +
				"\n\n" +
				white(bold("1)")) +
				" " +
				cyan("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏ —Ñ–∞–π–ª") +
				" " +
				dim("(RSA + SHA-1)") +
				"\n" +
				white(bold("2)")) +
				" " +
				cyan("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å") +
				"\n" +
				white(bold("3)")) +
				" " +
				cyan("(–î–µ–º–æ) –ê—Ç–∞–∫–∞ noKeyAttackRSA") +
				" " +
				dim("–Ω–∞ –º–∞–ª–∏—Ö n") +
				"\n" +
				white(bold("0)")) +
				" " +
				red("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
			{ ...subMenuBoxOptions, borderColor: "green" },
		),
	);
}

function showLab4Menu(): void {
	console.log(
		boxen(
			yellow(bold("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ ‚Ññ4")) +
				" " +
				dim("(Keylogger, Stego)") +
				"\n\n" +
				white(bold("1)")) +
				" " +
				cyan("–ó–∞–ø—É—Å—Ç–∏—Ç–∏ keylogger") +
				" " +
				dim("(–∫–æ–Ω—Å–æ–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)") +
				"\n" +
				white(bold("2)")) +
				" " +
				cyan("–ó—É–ø–∏–Ω–∏—Ç–∏ keylogger") +
				"\n" +
				white(bold("3)")) +
				" " +
				cyan("–í–±—É–¥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ BMP") +
				" " +
				dim("(LSB)") +
				"\n" +
				white(bold("4)")) +
				" " +
				cyan("–í–∏—Ç—è–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ BMP") +
				" " +
				dim("(LSB)") +
				"\n" +
				white(bold("0)")) +
				" " +
				red("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
			{ ...subMenuBoxOptions, borderColor: "yellow" },
		),
	);
}

// –î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É –≥–∞—Ä–Ω—ñ–π —Ä–∞–º—Ü—ñ
function showResult(title: string, content: string, color = "cyan"): void {
	console.log(
		boxen(bold(title) + "\n\n" + content, {
			padding: 1,
			margin: { top: 1, bottom: 1 },
			borderStyle: "single" as BorderStyle,
			borderColor: color,
			backgroundColor: "#000000",
		}),
	);
}

async function main() {
	console.clear();
	console.log(
		boxen(
			bold(yellow("CRYPTO CORE PLEX")) +
				"\n" +
				dim("~~~ Made by ") +
				blue("https://github.com/makarasty"),
			{
				padding: 1,
				margin: { top: 1, bottom: 1 },
				borderStyle: "double" as BorderStyle,
				borderColor: "cyan",
				backgroundColor: "#000000",
				textAlignment: "center",
			},
		),
	);

	while (true) {
		showMainMenu();
		const ans = await questionAsync(cyan("‚ùØ –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é [0..4]: "));
		console.log();

		if (ans === "0") {
			console.log(bold(green("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")));
			break;
		}

		switch (ans) {
			case "1":
				await lab1MenuLoop();
				break;
			case "2":
				await lab2MenuLoop();
				break;
			case "3":
				await lab3MenuLoop();
				break;
			case "4":
				await lab4MenuLoop();
				break;
			default:
				console.log(red("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."));
		}
	}

	rl.close();
	process.exit(0);
}

async function lab1MenuLoop() {
	while (true) {
		showLab1Menu();
		const ans = await questionAsync(magenta("‚ùØ –í–≤–µ–¥—ñ—Ç—å –ø—É–Ω–∫—Ç [0..5]: "));
		console.log();

		switch (ans) {
			case "0":
				return;
			case "1": {
				// DES Encrypt
				const inputFile = await questionAsync(
					yellow("üìÑ –®–ª—è—Ö –¥–æ –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É: "),
				);
				const outputFile = await questionAsync(
					cyan("üìÑ –®–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É: "),
				);

				const desKey = new Uint8Array([
					0x13, 0x34, 0x57, 0x79, 0x9b, 0xbc, 0xdf, 0xf1,
				]);
				try {
					desEncryptFile(inputFile, outputFile, desKey);
					showResult(
						"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó",
						"–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ DES.",
						"green",
					);
				} catch (e: unknown) {
					showResult(
						"–ü–æ–º–∏–ª–∫–∞",
						e instanceof Error ? e.toString() : String(e),
						"red",
					);
				}
				break;
			}
			case "2": {
				// DES Decrypt
				const inputFile = await questionAsync(
					yellow("üîí –®–ª—è—Ö –¥–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É: "),
				);
				const outputFile = await questionAsync(
					cyan("üìÑ –®–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É: "),
				);
				const desKey = new Uint8Array([
					0x13, 0x34, 0x57, 0x79, 0x9b, 0xbc, 0xdf, 0xf1,
				]);
				try {
					desDecryptFile(inputFile, outputFile, desKey);
					showResult("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó", "–§–∞–π–ª —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ DES.", "green");
				} catch (e: unknown) {
					showResult(
						"–ü–æ–º–∏–ª–∫–∞",
						e instanceof Error ? e.toString() : String(e),
						"red",
					);
				}
				break;
			}
			case "3": {
				// RSA Generate
				const bitLenStr = await questionAsync(
					yellow("üîë –í–≤–µ–¥—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É –∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 512 —á–∏ 1024): "),
				);
				const bitLen = parseInt(bitLenStr) || 512;
				try {
					const { n, e, d } = generateRSAKeyPair(bitLen);
					let resultText = "RSA key pair –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ:\n\n";
					resultText += `n = ${n.toString()}\n\n`;
					resultText += `e = ${e.toString()}\n\n`;
					resultText += `d = ${d.toString()}\n\n`;
					resultText += bold(
						yellow("üîê –ó–±–µ—Ä–µ–∂—ñ—Ç—å —Ü—ñ –∫–ª—é—á—ñ —É –±–µ–∑–ø–µ—á–Ω–æ–º—É –º—ñ—Å—Ü—ñ!"),
					);

					if (bitLen < 512) {
						resultText +=
							"\n\n" +
							red("‚ö†Ô∏è –£–í–ê–ì–ê! –î—É–∂–µ –º–∞–ª–∏–π –∫–ª—é—á, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ >= 1024 –±—ñ—Ç!");
					}

					showResult("RSA –ö–ª—é—á—ñ", resultText, "green");
				} catch (e: unknown) {
					showResult(
						"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–ª—é—á–∞",
						e instanceof Error ? e.toString() : String(e),
						"red",
					);
				}
				break;
			}
			case "4": {
				// RSA Encrypt
				const inputFile = await questionAsync(yellow("üìÑ –í—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª: "));
				const outputFile = await questionAsync(
					cyan("üîí –í–∏—Ö—ñ–¥–Ω–∏–π –∑–∞—à–∏—Ñ—Ä. —Ñ–∞–π–ª: "),
				);
				const nStr = await questionAsync(yellow("üîë –í–≤–µ–¥—ñ—Ç—å n (bigint): "));
				const eStr = await questionAsync(yellow("üîë –í–≤–µ–¥—ñ—Ç—å e (bigint): "));
				try {
					const n = BigInt(nStr);
					const e = BigInt(eStr);

					warnIfNTooSmall(n);

					rsaEncryptFile(inputFile, outputFile, n, e);
					showResult("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó", "–§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ RSA.", "green");
				} catch (e: unknown) {
					showResult(
						"–ü–æ–º–∏–ª–∫–∞",
						e instanceof Error ? e.toString() : String(e),
						"red",
					);
				}
				break;
			}
			case "5": {
				// RSA Decrypt
				const inputFile = await questionAsync(
					yellow("üîí –í—Ö—ñ–¥–Ω–∏–π –∑–∞—à–∏—Ñ—Ä. —Ñ–∞–π–ª: "),
				);
				const outputFile = await questionAsync(
					cyan("üìÑ –í–∏—Ö—ñ–¥–Ω–∏–π —Ä–æ–∑—à–∏—Ñ—Ä. —Ñ–∞–π–ª: "),
				);
				const nStr = await questionAsync(yellow("üîë –í–≤–µ–¥—ñ—Ç—å n (bigint): "));
				const dStr = await questionAsync(yellow("üîë –í–≤–µ–¥—ñ—Ç—å d (bigint): "));
				try {
					const n = BigInt(nStr);
					const d = BigInt(dStr);

					warnIfNTooSmall(n);

					rsaDecryptFile(inputFile, outputFile, n, d);
					showResult("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó", "–§–∞–π–ª —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ RSA.", "green");
				} catch (e: unknown) {
					showResult(
						"–ü–æ–º–∏–ª–∫–∞",
						e instanceof Error ? e.toString() : String(e),
						"red",
					);
				}
				break;
			}
			default:
				console.log(red("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –õ–†1."));
		}
		console.log();
	}
}

async function lab2MenuLoop() {
	while (true) {
		showLab2Menu();
		const ans = await questionAsync(blue("‚ùØ –í–≤–µ–¥—ñ—Ç—å –ø—É–Ω–∫—Ç [0..3]: "));
		console.log();

		switch (ans) {
			case "0":
				return;
			case "1": {
				// PRNG
				const seedStr = await questionAsync(
					yellow("üé≤ –í–≤–µ–¥—ñ—Ç—å seed (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 12345): "),
				);
				const seed = parseInt(seedStr) || 12345;
				const pm = new ParkMillerPRNG(seed);

				let resultText =
					"üìä –ü–µ—Ä—à—ñ 10 –ø—Å–µ–≤–¥–æ–≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª (Park‚ÄìMiller):\n\n";
				for (let i = 0; i < 10; i++) {
					resultText += `${i + 1}. ${pm.nextInt().toString()}\n`;
				}

				showResult("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Å–µ–≤–¥–æ–≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª", resultText, "blue");
				break;
			}
			case "2": {
				// Rabin‚ÄìMiller test
				const numStr = await questionAsync(
					yellow("üî¢ –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (bigint) –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: "),
				);
				const num = BigInt(numStr);
				const isPrime = rabinMillerTest(num, 16);

				let resultText = `–ß–∏—Å–ª–æ ${num.toString()} —î –ø—Ä–æ—Å—Ç–∏–º?\n\n`;
				resultText += isPrime ? green("‚úÖ –¢–ê–ö") : red("‚ùå –ù–Ü");

				showResult("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É", resultText, "blue");
				break;
			}
			case "3": {
				// Compare MD5 / SHA1
				const fileName = await questionAsync(
					yellow("üìÑ –í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É: "),
				);
				try {
					const data = fs.readFileSync(fileName);
					const t0 = Date.now();
					const hMd5 = md5(data);
					const t1 = Date.now();
					const deltaMd5 = t1 - t0;

					const t2 = Date.now();
					const hSha1 = sha1(data);
					const t3 = Date.now();
					const deltaSha1 = t3 - t2;

					let resultText = `MD5:  ${hMd5.toString("hex")}\n`;
					resultText += dim(`–ß–∞—Å –æ–±—á–∏—Å–ª–µ–Ω–Ω—è: ${deltaMd5} –º—Å\n\n`);
					resultText += `SHA1: ${hSha1.toString("hex")}\n`;
					resultText += dim(`–ß–∞—Å –æ–±—á–∏—Å–ª–µ–Ω–Ω—è: ${deltaSha1} –º—Å`);

					showResult("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ö–µ—à-—Ñ—É–Ω–∫—Ü—ñ–π", resultText, "magenta");
				} catch (e: unknown) {
					showResult(
						"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É",
						e instanceof Error ? e.toString() : String(e),
						"red",
					);
				}
				break;
			}
			default:
				console.log(red("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –õ–†2."));
		}
		console.log();
	}
}

async function lab3MenuLoop() {
	while (true) {
		showLab3Menu();
		const ans = await questionAsync(green("‚ùØ –í–≤–µ–¥—ñ—Ç—å –ø—É–Ω–∫—Ç [0..3]: "));
		console.log();

		switch (ans) {
			case "0":
				return;
			case "1": {
				// –ü—ñ–¥–ø–∏—Å–∞—Ç–∏ —Ñ–∞–π–ª
				const fileName = await questionAsync(
					yellow("üìÑ –Ø–∫–∏–π —Ñ–∞–π–ª –ø—ñ–¥–ø–∏—Å—É–≤–∞—Ç–∏? "),
				);
				const nStr = await questionAsync(yellow("üîë RSA n (bigint): "));
				const dStr = await questionAsync(yellow("üîë RSA d (bigint): "));
				try {
					const data = fs.readFileSync(fileName);
					const n = BigInt(nStr);
					const d = BigInt(dStr);

					warnIfNTooSmall(n);

					const signature = signMessage(data, n, d);

					let resultText = "‚úÖ –ü—ñ–¥–ø–∏—Å (signature) =\n\n";
					resultText += signature.toString();

					showResult("–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π –ø—ñ–¥–ø–∏—Å", resultText, "green");
				} catch (e: unknown) {
					showResult(
						"–ü–æ–º–∏–ª–∫–∞",
						e instanceof Error ? e.toString() : String(e),
						"red",
					);
				}
				break;
			}
			case "2": {
				// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å
				const fileName = await questionAsync(
					yellow("üìÑ –Ø–∫–∏–π —Ñ–∞–π–ª –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏? "),
				);
				const signatureStr = await questionAsync(
					yellow("üîë –í–≤–µ–¥—ñ—Ç—å signature (bigint): "),
				);
				const nStr = await questionAsync(yellow("üîë RSA n (bigint): "));
				const eStr = await questionAsync(yellow("üîë RSA e (bigint): "));
				try {
					const data = fs.readFileSync(fileName);
					const signature = BigInt(signatureStr);
					const n = BigInt(nStr);
					const e = BigInt(eStr);

					warnIfNTooSmall(n);

					const isOk = verifyMessage(data, signature, n, e);

					let resultText = isOk
						? green("‚úÖ –ü—ñ–¥–ø–∏—Å –≤—ñ—Ä–Ω–∏–π!")
						: red("‚ùå –ü—ñ–¥–ø–∏—Å –ù–ï –≤—ñ—Ä–Ω–∏–π!");

					showResult("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É", resultText, isOk ? "green" : "red");
				} catch (e: unknown) {
					showResult(
						"–ü–æ–º–∏–ª–∫–∞",
						e instanceof Error ? e.toString() : String(e),
						"red",
					);
				}
				break;
			}
			case "3": {
				// noKeyAttackRSA
				console.log(
					magenta("üîì –î–µ–º–æ noKeyAttackRSA (–ø—Ä–∞—Ü—é—î –Ω–∞ –¥—É–∂–µ –º–∞–ª–∏—Ö n)..."),
				);
				const smallNStr = await questionAsync(
					yellow("üîë –í–≤–µ–¥—ñ—Ç—å –º–∞–ª–µ n (bigint): "),
				);
				const eStr = await questionAsync(yellow("üîë –í–≤–µ–¥—ñ—Ç—å e (bigint): "));
				const MStr = await questionAsync(yellow("üìù –í–≤–µ–¥—ñ—Ç—å M (bigint): "));
				try {
					const n = BigInt(smallNStr);
					const e_ = BigInt(eStr);
					const M = BigInt(MStr);
					// –®–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç
					const C = modPow(M, e_, n);

					let resultText = `C = M^e mod n = ${C.toString()}\n\n`;
					resultText += dim("üîÑ –ó–∞–ø—É—Å–∫ noKeyAttackRSA...\n\n");

					const rec = noKeyAttackRSA(C, e_, n);

					resultText += `–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–µ M = ${rec.toString()}\n\n`;
					resultText += `–ó–±—ñ–≥? ‚Üí ${rec === M ? green("‚úÖ –¢–∞–∫") : red("‚ùå –ù—ñ")}`;

					showResult("–ê—Ç–∞–∫–∞ –±–µ–∑ –∫–ª—é—á–∞ RSA", resultText, "magenta");
				} catch (e: unknown) {
					showResult(
						"–ü–æ–º–∏–ª–∫–∞",
						e instanceof Error ? e.toString() : String(e),
						"red",
					);
				}
				break;
			}
			default:
				console.log(red("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –õ–†3."));
		}
		console.log();
	}
}

async function lab4MenuLoop() {
	while (true) {
		showLab4Menu();
		const ans = await questionAsync(yellow("‚ùØ –í–≤–µ–¥—ñ—Ç—å –ø—É–Ω–∫—Ç [0..4]: "));
		console.log();

		switch (ans) {
			case "0":
				return;
			case "1": {
				// –ó–∞–ø—É—Å—Ç–∏—Ç–∏ keylogger (–∫–æ–Ω—Å–æ–ª—å–Ω–∏–π)
				startKeylogger();
				showResult(
					"Keylogger",
					"‚å®Ô∏è Keylogger –∑–∞–ø—É—â–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å 'stop' –∞–±–æ Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏.",
					"cyan",
				);
				break;
			}
			case "2": {
				// –ó—É–ø–∏–Ω–∏—Ç–∏ keylogger
				stopKeylogger();
				showResult("Keylogger", "‚úÖ Keylogger –∑—É–ø–∏–Ω–µ–Ω–æ.", "green");
				break;
			}
			case "3": {
				// –í–±—É–¥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ BMP (LSB)
				const bmpIn = await questionAsync(yellow("üñºÔ∏è BMP –æ—Ä–∏–≥—ñ–Ω–∞–ª: "));
				const bmpOut = await questionAsync(cyan("üñºÔ∏è BMP –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º: "));
				const secretMsg = await questionAsync(
					yellow("üîí –Ø–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ö–æ–≤–∞—Ç–∏?: "),
				);
				try {
					const secretBuf = Buffer.from(secretMsg, "utf8");
					embedMessageLSB(bmpIn, bmpOut, secretBuf);
					showResult(
						"–°—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ—ñ—è",
						"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–±—É–¥–æ–≤–∞–Ω–æ!",
						"green",
					);
				} catch (e: unknown) {
					showResult(
						"–ü–æ–º–∏–ª–∫–∞",
						e instanceof Error ? e.toString() : String(e),
						"red",
					);
				}
				break;
			}
			case "4": {
				// –í–∏—Ç—è–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ BMP
				const bmpFile = await questionAsync(
					yellow("üñºÔ∏è BMP —Ñ–∞–π–ª –∑ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º: "),
				);
				try {
					const extracted = extractMessageLSB(bmpFile);

					let resultText = "üìù –í–∏—Ç—è–≥–Ω—É—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n\n";
					resultText += bold(extracted.toString("utf8"));

					showResult("–°—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ—ñ—è", resultText, "magenta");
				} catch (e: unknown) {
					showResult(
						"–ü–æ–º–∏–ª–∫–∞",
						e instanceof Error ? e.toString() : String(e),
						"red",
					);
				}
				break;
			}
			default:
				console.log(red("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –õ–†4."));
		}
		console.log();
	}
}

function warnIfNTooSmall(n: bigint) {
	const bitLen = n.toString(2).length; // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ—Ç —É n
	if (bitLen < 512) {
		showResult(
			"‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è",
			`–í–∞—à n = ${n.toString()} –º–∞—î –≤—Å—å–æ–≥–æ ${bitLen} –±—ñ—Ç!\n–¶–µ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π –∫–ª—é—á RSA. –ü—ñ–¥–ø–∏—Å —á–∏ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–º–∏.`,
			"yellow",
		);
	}
}

main().catch((err: unknown) => {
	showResult(
		"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞",
		err instanceof Error ? err.toString() : String(err),
		"red",
	);
	process.exit(1);
});
